(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{431:function(t,e,s){"use strict";s.r(e);var a=s(17),_=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"使用cmake和ctest组织工程测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用cmake和ctest组织工程测试"}},[t._v("#")]),t._v(" 使用CMake和CTest组织工程测试")]),t._v(" "),e("h2",{attrs:{id:"软件测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#软件测试"}},[t._v("#")]),t._v(" 软件测试")]),t._v(" "),e("p",[t._v("软件相关的测试包括：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("1.冒烟测试(SMOKE TEST)")]),t._v("，这是最基本的测试，例如代码能不能成功编译，能不能执行简单的测试用例。")]),t._v(" "),e("li",[e("code",[t._v("2.回归测试(Regression Test)")]),t._v("，回归测试确保软件更新后还能保证以前的功能可以正常运行。")]),t._v(" "),e("li",[e("code",[t._v("3.黑白盒测试(Black-, and White-box Testing)")]),t._v(",白盒测试是在知道代码如何编写的情况下测试代码可能存在的潜在的问题，黑盒测试是在只知道公开API信息而不知道代码实现的情况下，对软件功能进行测试。")]),t._v(" "),e("li",[e("code",[t._v("4.软件标准兼容性测试(Software Standard Compliance Testing)")]),t._v(",前面三种测试主要聚焦在代码可否正常编译，可否实现功能，软件标准兼容性测试是来测试代码是否工程标准，增强代码可维护性的。如代码规范维护使用的静态分析工具"),e("code",[t._v("cppchecker")]),t._v("等")])]),t._v(" "),e("h2",{attrs:{id:"cmake中如何组织测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cmake中如何组织测试"}},[t._v("#")]),t._v(" CMake中如何组织测试")]),t._v(" "),e("p",[e("code",[t._v("CMake")]),t._v("中对测试的支持主要是使用"),e("code",[t._v("add_test")]),t._v("命令。")]),t._v(" "),e("p",[t._v("要使用"),e("code",[t._v("add_test")]),t._v("命令，需要先在"),e("code",[t._v("CMakeLists.txt")]),t._v("中添加"),e("code",[t._v("include(CTest)")]),t._v(","),e("code",[t._v("add_test")]),t._v("的命令格式为：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("add_test"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NAME TestName COMMAND ExecutableToRun arg1 arg2 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("ul",[e("li",[t._v("第一个参数"),e("code",[t._v("TestName")]),t._v("是一个字符串，指定当前测试的名字")]),t._v(" "),e("li",[t._v("第二个参数"),e("code",[t._v("ExecutableToRun")]),t._v("是可执行文件的名称，"),e("code",[t._v("arg1/arg2/...")]),t._v("是可执行文件需要的参数，可执行文件的名称可以是当前工程中编译生成的文件名，也可以是外部可执行文件，如"),e("code",[t._v("Python")]),t._v("。")])]),t._v(" "),e("p",[t._v("使用方式十分简单，")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("add_executable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TestInstantiator TestInstantiator.cxx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntarget_link_libraries"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TestInstantiator vtkCommon"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nadd_test"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NAME TestInstantiator\n         COMMAND TestInstantiator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"测试属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试属性"}},[t._v("#")]),t._v(" 测试属性")]),t._v(" "),e("p",[t._v("当一个测试满足以下3个条件时才会认为测试用例通过，")]),t._v(" "),e("ul",[e("li",[t._v("测试执行文件可以找到")]),t._v(" "),e("li",[t._v("测试运行没有异常")]),t._v(" "),e("li",[t._v("测试执行成功并返回0")])]),t._v(" "),e("p",[t._v("通过"),e("code",[t._v("cmake")]),t._v("中的一些命令，可以改变这些属性：")]),t._v(" "),e("p",[e("code",[t._v("set_property")]),t._v("命令格式：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("set_property"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TEST test_name\n             PROPERTY prop1 value1 value2 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("code",[t._v("prop1")]),t._v("的可选项主要有：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("ENVIRONMENT")]),t._v("指定运行当前测试时需要的环境变量")]),t._v(" "),e("li",[e("code",[t._v("LABELS")]),t._v("指定当前测试的标签")]),t._v(" "),e("li",[e("code",[t._v("WILL_FAIL")]),t._v("这个选项被设置为"),e("code",[t._v("true")]),t._v("时，如果测试可执行文件返回的结果不是"),e("code",[t._v("0")]),t._v(",测试用例也能通过")]),t._v(" "),e("li",[e("code",[t._v("PASS_REGULAR_EXPRESSION")]),t._v(",测试程序的输出和这个属性设置的值不同时，测试用例将会提示测试失败。")]),t._v(" "),e("li",[e("code",[t._v("FAIL_REGULAR_EXPRESSION")]),t._v("，测试程序的输出和这个属性设置的值不同时，测试用例将会提示测试成功。")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("include"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CTest"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nadd_test"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NAME outputTest COMMAND "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${TARGET_NAME}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("passRegex "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^Test passed"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^All ok"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("failRegex "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Error"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Fail"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nset_property "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TEST outputTest\n              PROPERTY PASS_REGULAR_EXPRESSION "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${passRegex}")]),t._v('"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nset_property "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TEST outputTest\n              PROPERTY FAIL_REGULAR_EXPRESSION "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${failRegex}")]),t._v('"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"使用ctest"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用ctest"}},[t._v("#")]),t._v(" 使用CTest")]),t._v(" "),e("p",[t._v("使用"),e("code",[t._v("CMake")]),t._v("在构建环境中使用测试是通过"),e("code",[t._v("CTest")]),t._v("来实现的，"),e("code",[t._v("CTest")]),t._v("是一个可执行程序，"),e("code",[t._v("CTest")]),t._v("主要是通过"),e("code",[t._v("CTestTestfile.cmake")]),t._v("文件来实现控制运行哪些测试用例的。")]),t._v(" "),e("p",[e("code",[t._v("CTest")]),t._v("会执行当前构建树中的所有测试用例，包括"),e("code",[t._v("subdirectory")]),t._v("中的测试用例。"),e("code",[t._v("CTest")]),t._v("程序支持一些参数，用来控制执行测试程序的策略。")]),t._v(" "),e("ul",[e("li",[t._v("‵-R "),e("regex",[t._v("`参数，执行名字满足正则表达式的测试")])],1),t._v(" "),e("li",[e("code",[t._v("-E <regex>")]),t._v("参数，排除名字满足正则表达式的测试")]),t._v(" "),e("li",[e("code",[t._v("-L <regex>")]),t._v("参数，执行"),e("code",[t._v("label")]),t._v("满足正则表达式的测试")]),t._v(" "),e("li",[e("code",[t._v("-LE <regex>")]),t._v("参数，排除"),e("code",[t._v("label")]),t._v("满足正则表达式的测试")]),t._v(" "),e("li",[e("code",[t._v("-C <config>")]),t._v("参数")]),t._v(" "),e("li",[e("code",[t._v("-V,--verbose")]),t._v("参数，输出测试输出的详细信息，默认会保存在"),e("code",[t._v("Testing")]),t._v("文件夹下。")]),t._v(" "),e("li",[e("code",[t._v("-N,--show-only")]),t._v("参数，只统计有哪些测试，不执行实际的测试程序")]),t._v(" "),e("li",[e("code",[t._v("-I [Start,End,Stride,test#,test#|Test file]")]),t._v("参数，指定执行哪些测试用例")]),t._v(" "),e("li",[e("code",[t._v("-H")]),t._v("查看帮助信息")])]),t._v(" "),e("p",[t._v("参考工程"),e("a",{attrs:{href:"https://gitee.com/lx_r/basic_cplusplus_examples",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://gitee.com/lx_r/basic_cplusplus_examples"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"reference"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" reference")]),t._v(" "),e("blockquote",[e("p",[e("a",{attrs:{href:"https://cmake.org/cmake/help/book/mastering-cmake/chapter/Testing%20With%20CMake%20and%20CTest.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("1.https://cmake.org/cmake/help/book/mastering-cmake/chapter/Testing%20With%20CMake%20and%20CTest.html"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=_.exports}}]);