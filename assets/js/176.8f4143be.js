(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{497:function(a,t,s){"use strict";s.r(t);var e=s(17),r=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"uml面向对象类图和关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uml面向对象类图和关系"}},[a._v("#")]),a._v(" UML面向对象类图和关系")]),a._v(" "),t("h2",{attrs:{id:"_4种静态结构图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4种静态结构图"}},[a._v("#")]),a._v(" 4种静态结构图")]),a._v(" "),t("p",[a._v("UML中的的图表分成两类，结构图和行为图。行为图描述的是系统的动态特性，结构图描述了建模时系统的静态特性。结构图中提供了4种静态结构图来描述系统。其中，类图（Class Diagram）是软件的蓝图，用于详细描述系统内各个对象的相关类，以及这些类之间的静态关系；对象图（Object Diagram）用于表示在某一时刻，类的对象的静态结构和行为；包图（Package Diagram）用于展现由模型本身分解而成的组织单元（包）及它们的依赖关系；组合结构图（Composite Structure Diagram）用于描述系统中某一部分（组合结构）的内部结构，包括该部分与系统其他部分的交互点。")]),a._v(" "),t("p",[a._v("静态结构图的推荐使用场合：包括业务建模、分析、设计、实现等场合。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://day-pic-1311699660.cos.ap-nanjing.myqcloud.com/image/static-uml-1.jpeg",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"类图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类图"}},[a._v("#")]),a._v(" 类图")]),a._v(" "),t("p",[a._v("在面向对象语言中，在做系统代码设计时，经常看到有用UML类图去表示各种接口和类之间关系的。但是，每次看的都是云里雾里，搞不清楚那些虚线，箭头都是代表什么意思。现在我们一起来看下。")]),a._v(" "),t("p",[a._v("从上面的表中也能看到"),t("code",[a._v("UML")]),a._v("类图中有"),t("code",[a._v("6")]),a._v("种关系，分别是"),t("strong",[a._v("依赖(Dependency)/关联(Association)/聚合(Aggregation)/组合(Composition)/泛化(Generalization)/实现/(Realization)")])]),a._v(" "),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-mermaid"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("classDiagram")]),a._v("\nclassA "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("--|>")]),a._v(" classB "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Inheritance\nclassC "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("--*")]),a._v(" classD "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Composition\nclassE "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("--o")]),a._v(" classF "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Aggregation\nclassG "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("--\x3e")]),a._v(" classH "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Association\nclassI "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("--")]),a._v(" classJ "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Link"),t("span",{pre:!0,attrs:{class:"token text string"}},[a._v("(Solid)")]),a._v("\nclassK "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("..>")]),a._v(" classL "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Dependency\nclassM "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("..|>")]),a._v(" classN "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Realization\nclassO "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("..")]),a._v(" classP "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Link"),t("span",{pre:!0,attrs:{class:"token text string"}},[a._v("(Dashed)")]),a._v("\n")])])]),t("h2",{attrs:{id:"类的表示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的表示"}},[a._v("#")]),a._v(" 类的表示")]),a._v(" "),t("p",[a._v("UML中一个表示类的符号包括以下部分，其中有类名，属性，方法组成。")]),a._v(" "),t("blockquote",[t("p",[a._v("from "),t("a",{attrs:{href:"https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/"),t("OutboundLink")],1),t("br"),a._v(" "),t("img",{attrs:{src:"https://day-pic-1311699660.cos.ap-nanjing.myqcloud.com/image/02-class-notation.webp",alt:""}})])]),a._v(" "),t("p",[a._v("我们知道在面向对象中每个类的属性和方法的访问控制分成"),t("code",[a._v("private/protected/public")]),a._v("，这在类图中分别使用不同的符号来表示。")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[a._v("符号")]),a._v(" "),t("th",{staticStyle:{"text-align":"left"}},[a._v("访问权限")])])]),a._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("+")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("public")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("#")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("protected")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("-")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("private")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("~")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("package")])])])]),a._v(" "),t("p",[a._v("从类图的完整程度可以分成三种类图，")]),a._v(" "),t("ul",[t("li",[a._v("概念型(Conceptual),在系统中表示的是这个类，还没有设计属性和方法，属于最早期的设计。")]),a._v(" "),t("li",[a._v("具体型(Specification),关注的是抽象数据类型的接口")]),a._v(" "),t("li",[a._v("实现型(Implementation),描述了类如何实现其接口，确定函数的签名等。")])]),a._v(" "),t("blockquote",[t("p",[a._v("from [https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/]"),t("br"),a._v(" "),t("img",{attrs:{src:"https://day-pic-1311699660.cos.ap-nanjing.myqcloud.com/image/06-perspective-of-class-diagram.webp",alt:""}})])]),a._v(" "),t("h2",{attrs:{id:"类与类之间的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类与类之间的关系"}},[a._v("#")]),a._v(" 类与类之间的关系")]),a._v(" "),t("h3",{attrs:{id:"依赖关系-dependency"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖关系-dependency"}},[a._v("#")]),a._v(" 依赖关系(Dependency)")]),a._v(" "),t("p",[a._v("依赖关系的表示的是一种使用关系，考虑一个类的对象的方法中使用了另一个类的对象，作为函数参数或方法的局部变量，这时就是依赖关系。")]),a._v(" "),t("p",[a._v("如下图，"),t("code",[a._v("Person")]),a._v("类中有个"),t("code",[a._v("readBook")]),a._v("方法，依赖"),t("code",[a._v("Book")]),a._v("类。")]),a._v(" "),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-mermaid"}},[t("code",[t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("---")]),a._v("\ntitle"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Dependency example\n"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("---")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("classDiagram")]),a._v("\n    Book "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("<..")]),a._v(" Person\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Person"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        -int age\n        -String name\n        +void ReadBook"),t("span",{pre:!0,attrs:{class:"token text string"}},[a._v("(Book b)")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Book"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        -int isbn\n        -String name\n        +String getName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h3",{attrs:{id:"关联关系-association"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关联关系-association"}},[a._v("#")]),a._v(" 关联关系(Association)")]),a._v(" "),t("p",[a._v("关联关系表示的是对象之间的引用关系，其对应到现实世界中通常是动词连接的两个主体类别之间的关系，像老师教学生，学生选择课程。同时还要注意，关联关系还分成一对多，多对一，一对一，同时还区分类与类之间是单向关联还是双向关联。")]),a._v(" "),t("p",[a._v("如学生和老师，一个学生可以有多个老师，一个老师也可以有多个学生，因此是双向关联。而对于课程来说，只是开放出来供学生选择，只有学生选择课程的关系，是单向关联。")]),a._v(" "),t("p",[a._v("双向关联使用实线连接，单向关联使用实线单箭头连接关联类和被关联类，箭头指向被关联类。")]),a._v(" "),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-mermaid"}},[t("code",[t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("---")]),a._v("\ntitle"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Association example\n"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("---")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("classDiagram")]),a._v(" \n    Teacher "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("--")]),a._v(" Student\n    Student "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("--\x3e")]),a._v(" Course\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Teacher"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        -List<Student> students\n        +void teach"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Student"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        -List<Teacher> teachers\n        -List<Course> courses\n        +void study"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Course"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        -String name\n        +String outline"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h3",{attrs:{id:"聚合-aggregation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#聚合-aggregation"}},[a._v("#")]),a._v(" 聚合(Aggregation)")]),a._v(" "),t("p",[a._v("聚合是一种特殊的关联关系。其表示的是部分和整体的关系，一个类是另一个类的一部分，两个类有单独的生命周期，可以分离存在。")]),a._v(" "),t("p",[a._v("聚合关系在类中是通过成员对象来体现的，成员是整体的一部分，成员也可以脱离整体而存在。如公司与职员，汽车与车轮。")]),a._v(" "),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-mermaid"}},[t("code",[t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("---")]),a._v("\ntitle"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Aggregation example\n"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("---")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("classDiagram")]),a._v(" \n    Company "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("o--")]),a._v(" Employee\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Company"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        -List<Employee> employees\n        +void salary"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Employee"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        -String name\n        +void work"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h3",{attrs:{id:"组合-composition"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合-composition"}},[a._v("#")]),a._v(" 组合(Composition)")]),a._v(" "),t("p",[a._v("组合是一种比聚合更强的关联关系，聚合中整体和个体可以分别单独存在，但在组合关系中表示的是个体无法脱离整体存在。")]),a._v(" "),t("p",[a._v("整体被破坏掉时，个体也将被破坏掉。个体与整体同生共死，个体无法独立存在。")]),a._v(" "),t("p",[a._v("譬如，文件夹可以包含许多文件，而每个文件只有一个文件夹父级。如果删除文件夹，所有包含的文件也会被删除。")]),a._v(" "),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-mermaid"}},[t("code",[t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("---")]),a._v("\ntitle"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Composition example\n"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("---")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("classDiagram")]),a._v(" \n    Folder "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("*--")]),a._v(" File\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Folder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        -List<File> files\n        +void find"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" File"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        -String name\n        +void read"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h3",{attrs:{id:"实现-realization"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现-realization"}},[a._v("#")]),a._v(" 实现(Realization)")]),a._v(" "),t("p",[a._v("实现是蓝图类和包含其各自实现级别细节的对象之间的关系。实现关系就是接口和实现类之间的关系。类实现了接口中的抽象方法。特别是在"),t("code",[a._v("JAVA")]),a._v("这种语言中，接口类与实现类是分开的。")]),a._v(" "),t("p",[a._v("在接口类中指定行为，在实现类中实现或定义该行为。")]),a._v(" "),t("p",[a._v("从下图可以看出，"),t("code",[a._v("AccountBusinessRule")]),a._v("类实现了接口"),t("code",[a._v("IRuleAgent")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-mermaid"}},[t("code",[t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("---")]),a._v("\ntitle"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Realization example\n"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("---")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("classDiagram")]),a._v(" \n    IRuleAgent "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("..|>")]),a._v(" AccountBussinessRule\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" IRuleAgent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        +void addRule"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        +void changeRule"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        +void explainAction"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),t("h3",{attrs:{id:"继承-泛化-inheritance-generalization"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#继承-泛化-inheritance-generalization"}},[a._v("#")]),a._v(" 继承/泛化(Inheritance/Generalization)")]),a._v(" "),t("p",[a._v("泛化是一般的类和更具体的类之间的关系。泛化其实就是父子类之间的继承关系，表示一般与特殊的关系，指定子类如何特殊化父类的特征和行为。这是六种关系中相关性最强的关系。")]),a._v(" "),t("ul",[t("li",[a._v("表示的"),t("code",[a._v("是一个is-a")]),a._v("的关系，如"),t("code",[a._v("Animal")]),a._v("类和"),t("code",[a._v("Bird")]),a._v("类和"),t("code",[a._v("Dog")]),a._v("类，"),t("code",[a._v("Bird is a Animal")]),a._v("，"),t("code",[a._v("Dog is a Animal")]),a._v("。")]),a._v(" "),t("li",[a._v("抽象类名以斜体显示。")])]),a._v(" "),t("p",[a._v("下图显示了继承层次结构的示例,"),t("code",[a._v("SubClass1")]),a._v("和"),t("code",[a._v("SubClass2")]),a._v("继承自"),t("code",[a._v("SuperClass")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language-mermaid extra-class"},[t("pre",{pre:!0,attrs:{class:"language-mermaid"}},[t("code",[t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("---")]),a._v("\ntitle"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Generalization example\n"),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("---")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("classDiagram")]),a._v(" \n    SuperClass "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("--|>")]),a._v(" SubClass1\n    SuperClass "),t("span",{pre:!0,attrs:{class:"token arrow operator"}},[a._v("--|>")]),a._v(" SubClass2\n")])])]),t("p",[a._v("六种关系中，从弱到强依次是：依赖关系 < 关联关系 < 聚合关系 < 组合关系 < 实现关系 = 泛化关系。")]),a._v(" "),t("h2",{attrs:{id:"常用的uml工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用的uml工具"}},[a._v("#")]),a._v(" 常用的UML工具")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("mermaid")]),a._v(",支持在"),t("code",[a._v("Markdown")]),a._v("文档中使用，支持在线使用，"),t("a",{attrs:{href:"https://mermaid.live/edit",target:"_blank",rel:"noopener noreferrer"}},[a._v("在线预览"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("code",[a._v("umbrello")]),a._v(","),t("code",[a._v("ubuntu")]),a._v("下的免费"),t("code",[a._v("uml")]),a._v("工具，使用其画出的类图是这样的")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://day-pic-1311699660.cos.ap-nanjing.myqcloud.com/image/class_diagram.png",alt:""}})]),a._v(" "),t("ul",[t("li",[t("code",[a._v("PowerDesigner")]),a._v("，德国思爱普(SAP)公司开发的"),t("strong",[a._v("付费软件")]),a._v("，功能强大，可用于数据库模型设计等")])]),a._v(" "),t("h3",{attrs:{id:"reference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[a._v("#")]),a._v(" reference")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/",target:"_blank",rel:"noopener noreferrer"}},[a._v("1.https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000021317534",target:"_blank",rel:"noopener noreferrer"}},[a._v("2.https://segmentfault.com/a/1190000021317534"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://stackoverflow.com/questions/76350/free-cheap-powerdesigner-alternative",target:"_blank",rel:"noopener noreferrer"}},[a._v("3.https://stackoverflow.com/questions/76350/free-cheap-powerdesigner-alternative"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);