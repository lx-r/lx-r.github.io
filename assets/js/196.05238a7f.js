(window.webpackJsonp=window.webpackJsonp||[]).push([[196],{518:function(t,s,a){"use strict";a.r(s);var e=a(17),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"linux-shell任务控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux-shell任务控制"}},[t._v("#")]),t._v(" Linux Shell任务控制")]),t._v(" "),s("p",[t._v("通常情况下运行脚本的方式就是以实时模式在命令行界面上直接运行，除此之外还有很多其他的运行脚本的方式，如后台运行，定时运行等等。除运行方式外，还可以对脚本程序的运行进行控制，包括向脚本发送信号、修改脚本的优先级以及在脚本运行时从暂停切换到运行模式。")]),t._v(" "),s("h2",{attrs:{id:"_1-信号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-信号"}},[t._v("#")]),t._v(" 1)信号")]),t._v(" "),s("p",[s("code",[t._v("Linux")]),t._v("利用信号与运行在系统中的进程进行通信，可以通过对脚本进行编程，使其在收到特定信号时执行特定命令。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("信号")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("SIGHUP")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("挂起进程")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("SIGINT")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("终止进程")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("SIGQUIT")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("停止进程")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("9")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("SIGKILL")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("无条件终止进程")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("15")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("SIGTERM")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("尽可能终止进程")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("17")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("SIGSTOP")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("无条件停止进程，但不是终止进程")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("18")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("SIGTSTP")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("停止或暂停进程，但不终止进程")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("19")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("SIGCONT")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("继续运行停止的进程")])])])]),t._v(" "),s("p",[t._v("默认情况下，交互式"),s("code",[t._v("shell")]),t._v("终端本身的进程会忽略收到的任何 "),s("code",[t._v("SIGQUIT (3)")]),t._v(" 和 "),s("code",[t._v("SIGTERM (5)")]),t._v(" 信号，因此其不会被意外终止。")]),t._v(" "),s("p",[t._v("如果"),s("code",[t._v("bash shell")]),t._v("收到了 "),s("code",[t._v("SIGHUP")]),t._v(" 信号，比如当要离开一个交互式"),s("code",[t._v("shell")]),t._v("时，它就会退出。但在退出之前，它会将 "),s("code",[t._v("SIGHUP")]),t._v(" 信号传给所有由该"),s("code",[t._v("shell")]),t._v("所启动的进程。")]),t._v(" "),s("h3",{attrs:{id:"通过键盘生成信号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过键盘生成信号"}},[t._v("#")]),t._v(" 通过键盘生成信号")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("Ctrl+C")]),t._v("组合键会生成 "),s("code",[t._v("SIGINT")]),t._v(" 信号，并将其发送给当前在"),s("code",[t._v("shell")]),t._v("中运行的所有进程")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("Ctrl+Z")]),t._v("组合键会生成一个 "),s("code",[t._v("SIGTSTP")]),t._v(" 信号，停止"),s("code",[t._v("shell")]),t._v("中运行的任何进程。这样可以在进程运行期间暂停进程，而无需终止它。这样可以在不终止进程的情况下使用户深入脚本内部一窥究竟。")]),t._v(" "),s("p",[t._v("停止进程会让程序继续保留在内存中，并能从上次停止的位置继续运行。")]),t._v(" "),s("p",[s("strong",[t._v("要想启动停止的进程可以使用"),s("code",[t._v("fg")]),t._v("或"),s("code",[t._v("bg")]),t._v("在前台和后台启动")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ^Z")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1]+  已停止               sleep 100")]),t._v("\n")])])]),s("p",[t._v("方括号中的数字是"),s("code",[t._v("shell")]),t._v("分配的作业号 "),s("code",[t._v("（job number）")]),t._v("。")]),t._v(" "),s("p",[t._v("可以用 "),s("code",[t._v("ps")]),t._v(" 命令来查看已停止的作业。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-l")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# F S   UID     PID    PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0 T  1001  116014  113239  0  80   0 -  2791 do_sig pts/0    00:00:00 sleep")]),t._v("\n")])])]),s("p",[t._v("在 "),s("code",[t._v("S")]),t._v(" 列中（进程状态）， "),s("code",[t._v("ps")]),t._v(" 命令将已停止作业的状态为显示为 "),s("code",[t._v("T")]),t._v(" 。这说明命令要么被跟踪，要么被停止了。")]),t._v(" "),s("p",[t._v("在有已停止作业存在的情况下退出"),s("code",[t._v("shell")]),t._v("会终止已停止作业。")]),t._v(" "),s("h3",{attrs:{id:"trap-命令捕获信号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trap-命令捕获信号"}},[t._v("#")]),t._v(" trap 命令捕获信号")]),t._v(" "),s("p",[s("code",[t._v("trap")]),t._v("命令允许用户来指定"),s("code",[t._v("shell")]),t._v("脚本要监视并从"),s("code",[t._v("shell")]),t._v("中拦截的"),s("code",[t._v("Linux")]),t._v("信号。当脚本收到了 "),s("code",[t._v("trap")]),t._v(" 命令中列出的信号，会执行用户指定的操作。")]),t._v(" "),s("p",[s("code",[t._v("trap")]),t._v("命令的格式：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("trap")]),t._v(" commands signals\n")])])]),s("p",[t._v("示例，")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/bin/bash")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("trap")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"echo 'Ctrl-C Pressed'\"")]),t._v(" SIGINT\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" This is a "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$c")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-le")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Loop #'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$c")]),t._v('"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$c")]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n")])])]),s("p",[t._v("执行，")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ ./test.sh \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This is a test")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Loop #1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Loop #2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ^CCtrl-C Pressed")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Loop #3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Loop #4")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Loop #5")]),t._v("\n")])])]),s("p",[t._v("上面脚本中"),s("code",[t._v("trap")]),t._v(" 命令会在每次检测到 "),s("code",[t._v("SIGINT")]),t._v(" 信号时捕获这些信号，阻止用户用"),s("code",[t._v("bash shell")]),t._v("组合键"),s("code",[t._v("Ctrl+C")]),t._v("来停止程序。")]),t._v(" "),s("p",[s("strong",[t._v("除了在"),s("code",[t._v("shell")]),t._v("脚本中捕获中断信号，也可以在"),s("code",[t._v("shell")]),t._v("脚本退出时捕获退出信号"),s("code",[t._v("EXIT")])]),t._v("。以在"),s("code",[t._v("shell")]),t._v("完成任务时执行特定的命令。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/bin/bash")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("trap")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"echo 'Running Finished.'\"")]),t._v(" EXIT\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" This is a "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$c")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-le")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Loop #'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$c")]),t._v('"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$c")]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n")])])]),s("p",[t._v("执行，")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ ./test.sh \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This is a test")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Loop #1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Loop #2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Loop #3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Loop #4")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Loop #5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Running Finished.")]),t._v("\n")])])]),s("p",[s("strong",[t._v("要修改移除捕获，在脚本中的不同位置进行不同的捕获处理，只需重新使用带有新选项的 "),s("code",[t._v("trap")]),t._v(" 命令")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/bin/bash")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("trap")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"echo 'Caught SIGINT'\"")]),t._v(" SIGINT\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is first caughtion of SIGINT"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$c")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-le")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Loop #'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$c")]),t._v('"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$c")]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("trap")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"echo 'Redefine SIGINT '\"")]),t._v(" SIGINT\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is Mutated caughtion of SIGINT"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n")])])]),s("p",[t._v("执行，")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ ./test.sh\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This is first caughtion of SIGINT")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Loop #1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ^CCaught SIGINT")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Loop #2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Loop #3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This is Mutated caughtion of SIGINT")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ^CRedefine SIGINT")]),t._v("\n")])])]),s("p",[t._v("修改了信号捕获之后，脚本处理信号的方式就会发生变化。如果一个信号是在捕获被修改前接收到的，那么脚本仍然会根据最初的 "),s("code",[t._v("trap")]),t._v(" 命令进行处理。")]),t._v(" "),s("p",[s("strong",[t._v("想删除已设置好的捕获，只需要在 "),s("code",[t._v("trap")]),t._v(" 命令与希望恢复默认行为的信号列表之间加上两个破折号即可")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("trap")]),t._v(" -- SIGINT\n")])])]),s("h2",{attrs:{id:"_2-在后台运行脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-在后台运行脚本"}},[t._v("#")]),t._v(" 2)在后台运行脚本")]),t._v(" "),s("p",[t._v("直接在命令行界面运行"),s("code",[t._v("shell")]),t._v("脚本，脚本在运行时，没法在终端会话里做别的事情。")]),t._v(" "),s("p",[t._v("在用 "),s("code",[t._v("ps")]),t._v(" 命令时，会看到运行在"),s("code",[t._v("Linux")]),t._v("系统上的一系列不同进程。这些进程显然都不是运行在当前的终端显示器上的，这种模式称为在后台运行进程。在后台模式中，进程运行时不会和终端会话上的 "),s("code",[t._v("STDIN")]),t._v(" 、 "),s("code",[t._v("STDOUT")]),t._v(" 以及 "),s("code",[t._v("STDERR")]),t._v(" 关联。")]),t._v(" "),s("h3",{attrs:{id:"命令后加-符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令后加-符"}},[t._v("#")]),t._v(" 命令后加 & 符")]),t._v(" "),s("p",[t._v("前面介绍过，"),s("strong",[t._v("以后台模式运行"),s("code",[t._v("shell")]),t._v("脚本，只要在命令后加个 & 符就行")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ ./test.sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 118347")]),t._v("\n")])])]),s("p",[t._v("方括号中的数字是"),s("code",[t._v("shell")]),t._v("分配给后台进程的作业号。下一个数是"),s("code",[t._v("Linux")]),t._v("系统分配给进程的进程"),s("code",[t._v("ID（PID）")]),t._v("。当后台进程结束时，它会在终端上显示出一条消息：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1]+  已完成               ./test.sh")]),t._v("\n")])])]),s("p",[s("strong",[t._v("通过"),s("code",[t._v("./test.sh &")]),t._v("命令将脚本放在后台运行还存在两个问题，一个是当前"),s("code",[t._v("bash shell")]),t._v("终端关闭时后台运行中的进程仍然会被终止，第二个时放入后台的脚本输出仍然会显示在显示器上，会与新输入命令的输入混淆在一起")]),t._v("。")]),t._v(" "),s("p",[t._v("运行多个后台作业时，通过 "),s("code",[t._v("ps")]),t._v(" 命令，可以看到"),s("br"),t._v("\n所有脚本处于运行状态。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v(" ./test.sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n ./test.sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n")])])]),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# F S   UID     PID    PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0 S  1001  118703  118697  0  80   0 -  3178 do_wai pts/3    00:00:00 test.sh")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0 S  1001  118707  118703  0  80   0 -  2791 hrtime pts/3    00:00:00 sleep")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0 S  1001  118714  118697  0  80   0 -  3178 do_wai pts/3    00:00:00 test.sh")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0 S  1001  118718  118714  0  80   0 -  2791 hrtime pts/3    00:00:00 sleep")]),t._v("\n")])])]),s("h3",{attrs:{id:"使用nohub命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用nohub命令"}},[t._v("#")]),t._v(" 使用nohub命令")]),t._v(" "),s("p",[t._v("当需要在终端会话中启动"),s("code",[t._v("shell")]),t._v("脚本，然后让脚本一直以后台模式运行到结束，且终端会话退出仍不影响脚本运行时，前面介绍的"),s("code",[t._v("&")]),t._v("符号的方式就不适合了，这时需要使用"),s("code",[t._v("nohub")]),t._v("命令。")]),t._v(" "),s("p",[s("code",[t._v("nohup")]),t._v(" 命令运行的后台任务会阻断所有发送给该进程的 "),s("code",[t._v("SIGHUP")]),t._v("信号，这可以在退出终端会话时阻止进程退出。")]),t._v(" "),s("p",[s("code",[t._v("nohup")]),t._v(" 命令的格式:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nohup")]),t._v(" ./test.sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 119226")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# nohup: 忽略输入并把输出追加到'nohup.out'")]),t._v("\n")])])]),s("p",[t._v("由于 "),s("code",[t._v("nohup")]),t._v(" 命令会解除终端与进程的关联，进程也就不再同 "),s("code",[t._v("STDOUT")]),t._v(" 和 "),s("code",[t._v("STDERR")]),t._v(" 联系在一起。"),s("br"),t._v("\n为了保存该命令产生的输出， "),s("code",[t._v("nohup")]),t._v(" 命令会自动将 "),s("code",[t._v("STDOUT")]),t._v(" 和 "),s("code",[t._v("STDERR")]),t._v(" 的消息重定向到一个名为"),s("br"),t._v(" "),s("code",[t._v("nohup.out")]),t._v("的文件中。"),s("strong",[t._v("值得注意的是，当在同个目录同时启动多个"),s("code",[t._v("nohub")]),t._v("命令时，会输出到同一个"),s("code",[t._v("nohub.out")]),t._v("文件中")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"_3-作业控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-作业控制"}},[t._v("#")]),t._v(" 3)作业控制")]),t._v(" "),s("p",[s("code",[t._v("jobs")]),t._v(" 命令可以查看分配给"),s("code",[t._v("shell")]),t._v("的作业。")]),t._v(" "),s("p",[t._v("通过"),s("code",[t._v("test.sh")]),t._v("启动两个作业，")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ ./test.sh\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This is first caughtion of SIGINT")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Loop #1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ^Z")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1]+  已停止")]),t._v("\n$ ./test.sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" test.out "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [2] 119480")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("jobs")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1]+  已停止               ./test.sh")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [2]-  运行中               ./test.sh > test.out &")]),t._v("\n")])])]),s("p",[t._v("要想查看作业的"),s("code",[t._v("PID")]),t._v("，可以在 "),s("code",[t._v("jobs")]),t._v(" 命令中加入 "),s("code",[t._v("-l")]),t._v(" 选项。"),s("strong",[s("code",[t._v("jobs")]),t._v(" 命令输出中的加号和减号的含义是带加号的作业会被当做默认作业，在使用作业控制命令时，如果未在命令行指定任何作业号，该作业会被当成作业控制命令的操作对象")]),t._v("。当前的默认作业完成处理后，带减号的作业成为下一个默认作业。任何时候都只有一个带加"),s("br"),t._v("\n号的作业和一个带减号的作业。在前面介绍的重新启动停止的作业的命令"),s("code",[t._v("fg/bg")]),t._v("不带参数时，启动的就是"),s("code",[t._v("+")]),t._v("号对应的作业。")]),t._v(" "),s("p",[t._v("更多"),s("code",[t._v("jobs")]),t._v("命令的选项参数，可以通过命令"),s("code",[t._v("jobs --help")]),t._v("查看。")]),t._v(" "),s("h2",{attrs:{id:"_4-调度优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-调度优先级"}},[t._v("#")]),t._v(" 4)调度优先级")]),t._v(" "),s("p",[t._v("调度优先级决定了内核分配给进程的CPU时间。在"),s("code",[t._v("Linux")]),t._v("系统中，由"),s("code",[t._v("shell")]),t._v("启动的所有进程的调度优先级默认都是相同的，都是"),s("code",[t._v("0")]),t._v("。调度优先级是个整数值，从"),s("code",[t._v("-20")]),t._v("（最高优先级）到"),s("code",[t._v("+19")]),t._v("（最低优先级）。")]),t._v(" "),s("p",[t._v("要改变一个"),s("code",[t._v("shell")]),t._v("脚本的优先级，可以通过 "),s("code",[t._v("nice")]),t._v(" 命令做到。")]),t._v(" "),s("h3",{attrs:{id:"nice命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nice命令"}},[t._v("#")]),t._v(" nice命令")]),t._v(" "),s("p",[s("code",[t._v("nice")]),t._v(" 命令允许你设置命令启动时的调度优先级。要让命令以更低的优先级运行，只要用 "),s("code",[t._v("nice")]),t._v("的 "),s("code",[t._v("-n")]),t._v(" 命令行来指定新的优先级即可。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nice")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" ./test.sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" test.out "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [2] 120413")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("120413")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" pid,ppid,ni,cmd\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     PID    PPID  NI CMD")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  120413  118697  10 /bin/bash ./test.sh")]),t._v("\n")])])]),s("p",[t._v("通过"),s("code",[t._v("ps")]),t._v("命令可以看到调度优先级已经被调整到了"),s("code",[t._v("10")]),t._v("。")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("nice")]),t._v(" 命令阻止普通系统用户来提高命令的优先级")]),t._v("，需要使用"),s("code",[t._v("root")]),t._v("权限。")]),t._v(" "),s("h3",{attrs:{id:"renice-命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#renice-命令"}},[t._v("#")]),t._v(" renice 命令")]),t._v(" "),s("p",[s("code",[t._v("renice")]),t._v("命令用来改变系统上已运行命令的优先级。通过指定运行进程的PID来改变它的优先级。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("renice")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("120756")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 120756 (process ID) 旧优先级为 0，新优先级为 10")]),t._v("\n")])])]),s("h2",{attrs:{id:"_5-定时运行作业"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-定时运行作业"}},[t._v("#")]),t._v(" 5)定时运行作业")]),t._v(" "),s("p",[s("code",[t._v("Linux")]),t._v("系统提供了多个在预选时间运行脚本的方法： "),s("code",[t._v("at")]),t._v(" 命令和 "),s("code",[t._v("cron")]),t._v(" 表。")]),t._v(" "),s("h3",{attrs:{id:"at"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#at"}},[t._v("#")]),t._v(" at")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("at")]),t._v(" 命令允许指定"),s("code",[t._v("Linux")]),t._v("系统何时运行脚本，相当于是预约执行任务")]),t._v("。")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("at")]),t._v(" 的守护进程 "),s("code",[t._v("atd")]),t._v(" 会以后台模式运行，检查作业队列来运行作业。大多数"),s("code",[t._v("Linux")]),t._v("发行版会在启动时运行此守护进程")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("atd")]),t._v(" 守护进程会检查系统上的一个特殊目录（通常位于"),s("code",[t._v("/var/spool/at")]),t._v("）来获取用 "),s("code",[t._v("at")]),t._v(" 命令提交的作业。默认情况下， "),s("code",[t._v("atd")]),t._v(" 守护进程会每60秒检查一下这个目录。有作业时， "),s("code",[t._v("atd")]),t._v(" 守护进程会检查作业设置运行的时间。如果时间跟当前时间匹配， atd` 守护进程就会运行此作业。")]),t._v(" "),s("p",[s("code",[t._v("at")]),t._v(" 命令的基本格式:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("at "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-f filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("-f")]),t._v(" 参数来指定用于读取命令（脚本文件）的文件名。")]),t._v(" "),s("li",[s("code",[t._v("time")]),t._v(" 参数指定了Linux系统何时运行该作业。")])]),t._v(" "),s("p",[s("code",[t._v("at")]),t._v(" 命令能识别多种不同的时间格式:")]),t._v(" "),s("ul",[s("li",[t._v("标准的小时和分钟格式，比如"),s("code",[t._v("22:15")])]),t._v(" "),s("li",[s("code",[t._v("AM/PM")]),t._v("指示符，比如"),s("code",[t._v("10:15 PM")])]),t._v(" "),s("li",[t._v("特定可命名时间，比如"),s("code",[t._v("now")]),t._v("、"),s("code",[t._v("noon")]),t._v("、"),s("code",[t._v("midnight")]),t._v("或者"),s("code",[t._v("teatime（4 PM）")])]),t._v(" "),s("li",[t._v("通过不同的日期格式指定特定的日期\n"),s("ul",[s("li",[t._v("标准日期格式，比如MMDDYY、MM/DD/YY或DD.MM.YY")]),t._v(" "),s("li",[t._v("文本日期，比如Jul 4或Dec 25，加不加年份均可")]),t._v(" "),s("li",[t._v("指定时间增量:当前时间+25 min。")])])])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ at "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-f")]),t._v(" test.sh  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(":23\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# warning: commands will be executed using /bin/sh")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# job 3 at Mon Jan  8 21:23:00 2024")]),t._v("\n")])])]),s("p",[s("strong",[t._v("作业队列的字母排序越高，作业运行的优先级就越低，"),s("code",[t._v("nice")]),t._v("值更高")]),t._v("。默认情况下， "),s("code",[t._v("at")]),t._v(" 的作业会被提交到 "),s("code",[t._v("a")]),t._v(" 作业队列。如果想以更高优先级运行作业，可以用 "),s("code",[t._v("-q")]),t._v(" 参数指定不同的队列字母。")]),t._v(" "),s("p",[s("strong",[t._v("在使用 "),s("code",[t._v("at")]),t._v(" 命令时，最好在脚本中对 "),s("code",[t._v("STDOUT")]),t._v(" 和 "),s("code",[t._v("STDERR")]),t._v(" 进行重定向")]),t._v("。")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("atq")]),t._v(" 命令可以查看系统中有哪些作业在等待")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ atq\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1\tMon Jan  8 21:17:00 2024 = rob")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 6\tTue Jan  9 20:24:00 2024 a rob")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3\tMon Jan  8 21:23:00 2024 = rob")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4\tTue Jan  9 20:24:00 2024 a rob")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 5\tTue Jan  9 20:24:00 2024 a rob")]),t._v("\n")])])]),s("p",[t._v("可以用 "),s("code",[t._v("atrm")]),t._v(" 命令来删除等待中的作业。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ atrm "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n$ atq\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1\tMon Jan  8 21:17:00 2024 = rob")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3\tMon Jan  8 21:23:00 2024 = rob")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4\tTue Jan  9 20:24:00 2024 a rob")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 5\tTue Jan  9 20:24:00 2024 a rob")]),t._v("\n")])])]),s("h3",{attrs:{id:"定期执行命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定期执行命令"}},[t._v("#")]),t._v(" 定期执行命令")]),t._v(" "),s("p",[s("code",[t._v("at")]),t._v(" 命令可以在预设时间安排脚本执行，但如果需要脚本在每天的同一时间运行或是每周一次、每月一次就需要使用新方法。")]),t._v(" "),s("p",[s("code",[t._v("Linux")]),t._v("系统使用"),s("code",[t._v("cron")]),t._v("程序来安排要定期执行的作业。 "),s("code",[t._v("cron")]),t._v("程序会在后台运行并检查"),s("code",[t._v("cron")]),t._v("时间表，以获知已安排执行的作业。")]),t._v(" "),s("p",[t._v("可以使用"),s("code",[t._v("crontab -e")]),t._v("来编辑"),s("code",[t._v("cron")]),t._v("时间表：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("crontab")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# GNU nano 4.8                                 /tmp/crontab.hABXZo/crontab                                         ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# # Edit this file to introduce tasks to be run by cron.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# # ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# # Each task to run has to be defined through a single line")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# # indicating with different fields when the task will be run")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# # and what command to run for the task")]),t._v("\n\n")])])]),s("p",[t._v("表中每一行表示一个定期执行的任务，其格式为：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# m h  dom mon dow   command")]),t._v("\n")])])]),s("p",[s("code",[t._v("m")]),t._v("表示"),s("code",[t._v("分钟，")]),t._v("h"),s("code",[t._v("表示小时，")]),t._v("dom"),s("code",[t._v("表示几号，")]),t._v("mon"),s("code",[t._v("表示月份，")]),t._v("dow"),s("code",[t._v("表示星期几，")]),t._v("*`表示任意日期。")]),t._v(" "),s("p",[t._v("分别是："),s("code",[t._v("minute (m), hour (h), day of month (dom), month (mon),# and day of week (dow) or use '*' in these fields (for 'any')")])]),t._v(" "),s("p",[t._v("示例：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/")]),t._v("\n")])])]),s("p",[t._v("表示每周一凌晨5点将"),s("code",[t._v("home.tgz")]),t._v("解压到"),s("code",[t._v("/home")]),t._v("路径中。")]),t._v(" "),s("p",[t._v("每月最后一天执行的任务设置方式，")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 00 12 * * * if [ ` date +%d -d tomorrow ` = 01 ] ; then ; command")]),t._v("\n")])])]),s("p",[s("strong",[t._v("列出"),s("code",[t._v("crontab")]),t._v("中的任务")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("crontab")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-l")]),t._v("\n")])])]),s("p",[s("strong",[t._v("如果待执行的脚本对精确的执行时间要求不高，用预配置的cron脚本目录会更方便")]),t._v("。在"),s("code",[t._v("/etc/")]),t._v("路径下有4个基本目录："),s("code",[t._v("cron.hourly、daily、monthly")]),t._v("和"),s("code",[t._v("weekly")]),t._v("。譬如，如果脚本需要每天运行一次，只要将脚本复制到"),s("code",[t._v("daily")]),t._v("目录，"),s("code",[t._v("cron")]),t._v("就会每天执行它。")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("cron")]),t._v("程序的唯一问题是它假定Linux系统是7×24小时运行的，如果系统存在关机重启，有可能会错误定时任务，处理这种情况最好是能在开机时检查是否有错过的定时任务，而"),s("code",[t._v("cron")]),t._v("并不会去检查，很多"),s("code",[t._v("Linux")]),t._v("发行版还包含了"),s("code",[t._v("anacron")]),t._v("程序可以解决这个问题")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("anacron")]),t._v("程序只会处理位于"),s("code",[t._v("cron")]),t._v("目录的程序，比如"),s("code",[t._v("/etc/cron.monthly")]),t._v("。它用时间戳来决定作业是否在正确的计划间隔内运行了。每个"),s("code",[t._v("cron")]),t._v("目录都有个时间戳文件，该文件位于"),s("code",[t._v("/var/spool/anacron")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /var/spool/anacron/cron.monthly\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 20240104")]),t._v("\n")])])]),s("h3",{attrs:{id:"reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" reference")]),t._v(" "),s("blockquote",[s("p",[t._v("1."),s("a",{attrs:{href:""}},[t._v("《Linux命令行与shell脚本编程大全》")])])]),t._v(" "),s("InArticleAdsense",{attrs:{"data-ad-client":"ca-pub-8685746128991385","data-ad-slot":"2974191661"}})],1)}),[],!1,null,null,null);s.default=n.exports}}]);